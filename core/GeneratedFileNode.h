#pragma once
#include "FileNode.h"

namespace YAM
{
    class CommandNode;
    class IStreamer;

    class __declspec(dllexport) GeneratedFileNode : public FileNode
    {
    public:
        GeneratedFileNode() {} // needed for deserialization

        // Construct a generated file node for the file identified by given 
        // 'name' and generated by given 'producer'.
        GeneratedFileNode(
            ExecutionContext* context, 
            std::filesystem::path const& name, 
            std::shared_ptr<CommandNode> const& producer);

        std::string className() const override { return "GeneratedFileNode"; }

        CommandNode* producer() const;
        bool deleteFile(bool setDirty = false);

        static void setStreamableType(uint32_t type);
        // Inherited from IStreamable
        uint32_t typeId() const override; 
        void stream(IStreamer* streamer) override;

    private:
        std::shared_ptr<CommandNode> _producer;
    };
}

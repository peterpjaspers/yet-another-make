- executionHash
  In a design discussion it was proposed to model all inputs and as nodes.
  This would allow YAM to compute executionHash in Node class (instead of making it a
  sub-class responsibility).
  
  Analysis:
  In its simplest form command node class needs a member field: string _script;
  Command node executionHash = hash(hash(_script), hash(input files), hash(output files))

  Modeling the script as a node (holding the script string) incurs overhead: 
	- memory: for each command node also a script node
	- threadpool: script node execution will hash the script text in thread pool.
          Hashing the script text is very fast. The overhead of posting this operation
          is probably larger than the hashing itself.
  
  To avoid this overhead the following implementation is proposed:

  Node class has (a.o.) the following member functions:
      protected:
          XXH64_hash_t computeExecutionHashExt(std::initializer_list<XXH64_hash_t> otherHashes) const;
      public:
          virtual XXH64_hash_t computeExecutionHash() const { return computeExecutionHash({});}

  Pseudo-code of computeExecutionHash(otherHashes): { return hash(output node hashes, input node hashes, otherHashes)); }

  Command node class has member field: string _script
  Command node overrides computeExecutionHash: return computeExecutionHash(hash(_script));
  Note: there are 2 situations in which CommandNode::computeExecutionHash is called:
	- during self-execution of the command node, in thread pool, immediately after completion of
          command script. The hash is stored in Node::_executionHash
        - after completion of command prerequisites execution to figure out whether command self-execution
          is pending: pending =  _executionHash != computeExecutionHash()

  File node overrides computeExecutionHash(): return hashFileContent(_name);
  Because computeExecutionHash() is potentially expensive it is intended to be called only 
  during self-execution of the file node.
  In that case it obviously makes no sense to implement file node pending as: pending = _executionHash != computeExecutionHash()
  Instead the implementation is: pending = _state == State::Dirty
  A file node must be set dirty at start of alpha-build and, during beta-build, when the file is write-accessed.

  See https://miro.com/app/board/uXjVO-7wAmU=/ 
  In this board a build file node generates all command nodes, including the command scripts.
  The build file may reference files (e.g. a file that contains a version nr) and globs (e.g. 
  glob *.cpp is used to create a compile command for each cpp file found in the src directory).
  The execution hash of a build file node the becomes:
	executionHash = hash(hash(input build files), hash(other input files), hash(input globs))
  Note: the output of a build file node are command nodes. These are not part of the executionHash 
  because there is no way that the user can tamper with this output.
  Note: files and globs are nodes.

Todo
- build state storage
    - implement streaming btree (provides streaming of value types into btree via ValueStreamer i/f)
    - implement ObjectStreamer (streams C++ objects to/from ValueStreamer)
    - implement BuildStateStreamer (streams YAM buildstate)
- winkin (build cache)
- build file syntax (follow tup, follow mrmake, something completely different?)
    - decide
    - implement parsers and DAG updater
- SourceFileRepository: SourceDirectoryNode takes exclude (ignore) patterns
  from .gitignore and from .yamignore (having gitignore syntex).
  In a git repo:
      .gitignore typically ignores build outputs.
      .yamignore can additionally ignore source files
  Not a git repo:
      .yamignore ignores build outputs and optionally source files
- Decide how to deal with using generated files from other repos
    - first build in other repo using that repo's build server, then build this
       repo versus build both repos in this repo's build server.
       In first case generated files from other repos must be treated as source files.
       In second case multi-repo-graph managed by this repo's build server and business
       as usual. Disadvantage: if other repo was already build then this repo will build
       it again.
    - build file must tell YAM which repo's to build
- Persistentbuildstate
- File aspects as nodes
- aspect hashing for Dll import lib and code parts of C++ files 
- Logging by node in thread pool to memorystream
  Seperated thread forwards log to tcp/ip socket to client
- Hide btree behind interface and let current file storage inherit from this interface.
- Command node script VS command node direct program execution.



Done
- ExecutionContext
  To avoid singletons a context object is passed to Node constructor.
  It provides access to:
    - NodeSet (renamed from Graph)
    - main thread and thread pool and their dispatchers
    - file aspect hasher configuration
    - file repositories (the directories from which YAM is allowed to take input dependencies)
    - command line options
    - logBook
- filenode, sourcefile, generatedfile (output file of command node)
- Process class => boost process
- file aspect hashes
    - FileNode::_hashes (std::map<aspectName => XXH64_hash_t)
      _hashes is populated when node is created and updated when context.filehashers changes
      and file name matches one of filehashes patterns.
      Note: it is more attractive to only add aspects to filenode that are actually used.
      With this approach it may happen that hashes are computed that are never used.
      Unfortunately this is not possible because it cannot be known in advance which commands
      will use a file as input.
    - CommandNode::_inputAspects (std::vector<{fileNamePattern, aspectName}>) 
- client-server interface

- Command node:
    - file dependency detection
        - define dependency detection interface, e.g. dependencies = track(program)
        - pluggable dependency detection implementation
        - script communicates file dependencies via stdout to YAM or 
          via files (as Microsoft's filetracker and tup's dllinject)
        - YAM provides file dependency detection support a la MS filetracker
          Consider reuse of tup dependency detector
    - integrate file dependency detectionIn CommandNode
    - handle the race-conditions described in the last 2 notes in the description of
      FileNode.h
    - distinguish between modifications caused by user editing source files and tampering
      (e.g. deleting) with generated files.
      See TrackedFileRepository 




  See https://miro.com/app/board/uXjVO-7wAmU=/ 
  In this board a build file node generates all command nodes, including the command scripts.
  The build file may reference files (e.g. a file that contains a version nr) and globs (e.g. 
  to create a compile command for each cpp file found in the src directory).
  The execution hash of a build file node the becomes:
    executionHash = hash(hash(input build files), hash(other input files), hash(input globs))
  Note: the output command nodes are not part of this hash because there is no way
  that the user can tamper with this output.
  Note: files and globs are nodes.

- What node info can be updated in threadpool context and what not?
  E.g. at first glance updating Node::_executionHash, FileNode::_lastWriteTime in ThreadPool seems harm-less
  Why? Because no other threads rely on this data while the node execution is in progress.
  E.g. detecting a input include file during C++ compilation requires creation of a FileNode and
  computation of the include file hash(es). The hashing must be done in threadpool. Adding the new node
  to Graph however must either be done in graph critical section or in main thread context.
  Changing Node::State is another example that must either be done in critical section or main thread.
  Why? Because node's that execute their prerequisites inspect Node::State to figure out which prerequisites
  need to be started.
  

filenode: empty set of aspects: use write time as hash. 
executioncontext should return either entirefileaspect or lastwritetimeaspect ico empty set.

binaryvaluestreamer: take endianship into account

builder: suspend threadpool during stopBuild

split BuildRequest in Init, Build and Clean.

Handle Init while in dir tree where a parent already contains .yam dir